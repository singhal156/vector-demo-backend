//
// Copyright 2024 Picovoice Inc.
//
// You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
// file accompanying this source.
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.pvStatusToException = exports.CobraActivationRefusedError = exports.CobraActivationThrottledError = exports.CobraActivationLimitReachedError = exports.CobraActivationError = exports.CobraRuntimeError = exports.CobraInvalidStateError = exports.CobraKeyError = exports.CobraStopIterationError = exports.CobraInvalidArgumentError = exports.CobraIOError = exports.CobraOutOfMemoryError = exports.CobraError = void 0;
const pv_status_t_1 = require("./pv_status_t");
class CobraError extends Error {
    _message;
    _messageStack;
    constructor(message, messageStack = []) {
        super(CobraError.errorToString(message, messageStack));
        this._message = message;
        this._messageStack = messageStack;
    }
    get message() {
        return this._message;
    }
    get messageStack() {
        return this._messageStack;
    }
    static errorToString(initial, messageStack) {
        let msg = initial;
        if (messageStack.length > 0) {
            msg += `: ${messageStack.reduce((acc, value, index) => acc + '\n  [' + index + '] ' + value, '')}`;
        }
        return msg;
    }
}
exports.CobraError = CobraError;
class CobraOutOfMemoryError extends CobraError {
}
exports.CobraOutOfMemoryError = CobraOutOfMemoryError;
class CobraIOError extends CobraError {
}
exports.CobraIOError = CobraIOError;
class CobraInvalidArgumentError extends CobraError {
}
exports.CobraInvalidArgumentError = CobraInvalidArgumentError;
class CobraStopIterationError extends CobraError {
}
exports.CobraStopIterationError = CobraStopIterationError;
class CobraKeyError extends CobraError {
}
exports.CobraKeyError = CobraKeyError;
class CobraInvalidStateError extends CobraError {
}
exports.CobraInvalidStateError = CobraInvalidStateError;
class CobraRuntimeError extends CobraError {
}
exports.CobraRuntimeError = CobraRuntimeError;
class CobraActivationError extends CobraError {
}
exports.CobraActivationError = CobraActivationError;
class CobraActivationLimitReachedError extends CobraError {
}
exports.CobraActivationLimitReachedError = CobraActivationLimitReachedError;
class CobraActivationThrottledError extends CobraError {
}
exports.CobraActivationThrottledError = CobraActivationThrottledError;
class CobraActivationRefusedError extends CobraError {
}
exports.CobraActivationRefusedError = CobraActivationRefusedError;
function pvStatusToException(pvStatus, errorMessage, messageStack = []) {
    switch (pvStatus) {
        case pv_status_t_1.default.OUT_OF_MEMORY:
            throw new CobraOutOfMemoryError(errorMessage, messageStack);
        case pv_status_t_1.default.IO_ERROR:
            throw new CobraIOError(errorMessage, messageStack);
        case pv_status_t_1.default.INVALID_ARGUMENT:
            throw new CobraInvalidArgumentError(errorMessage, messageStack);
        case pv_status_t_1.default.STOP_ITERATION:
            throw new CobraStopIterationError(errorMessage, messageStack);
        case pv_status_t_1.default.KEY_ERROR:
            throw new CobraKeyError(errorMessage, messageStack);
        case pv_status_t_1.default.INVALID_STATE:
            throw new CobraInvalidStateError(errorMessage, messageStack);
        case pv_status_t_1.default.RUNTIME_ERROR:
            throw new CobraRuntimeError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_ERROR:
            throw new CobraActivationError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_LIMIT_REACHED:
            throw new CobraActivationLimitReachedError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_THROTTLED:
            throw new CobraActivationThrottledError(errorMessage, messageStack);
        case pv_status_t_1.default.ACTIVATION_REFUSED:
            throw new CobraActivationRefusedError(errorMessage, messageStack);
        default:
            // eslint-disable-next-line no-console
            console.warn(`Unmapped error code: ${pvStatus}`);
            throw new CobraError(errorMessage, messageStack);
    }
}
exports.pvStatusToException = pvStatusToException;
//# sourceMappingURL=errors.js.map